cinclude "<ctype.h>"

mod typeExt:
	cdef pure char_get_isAlNum(char c) bool "isalnum(##ARG0_VALUE_CSRC)"
	cdef pure char_get_isAlpha(char c) bool "isalpha(##ARG0_VALUE_CSRC)"
	cdef pure char_get_isDigit(char c) bool "isdigit(##ARG0_VALUE_CSRC)"
	cdef pure char_get_isBlank(char c) bool "isblank(##ARG0_VALUE_CSRC)"
	cdef pure char_get_isUpper(char c) bool "isupper(##ARG0_VALUE_CSRC)"
	cdef pure char_get_isLower(char c) bool "islower(##ARG0_VALUE_CSRC)"

	cdef pure char_toUpper(char c) char "toupper(##ARG0_VALUE_CSRC)"
	cdef pure char_toLower(char c) char "toupper(##ARG0_VALUE_CSRC)"

	pure array_char_toUpper(array<char> str) array<char>:
		toret = str
		for i from 0 within toret:
			toret[i] = str[i].toUpper()
		return toret
	
	pure array_char_toLower(array<char> str) array<char>:
		toret = str
		for i from 0 within toret:
			toret[i] = str[i].toLower()
		return toret
		
	pure array_char_trim(array<char> str) option<array<char>>:
		startIndex = 0
		while startIndex < str as int and str[startIndex].isBlank:
			startIndex = startIndex + 1
		stop = str as int - 1
		while stop >= startIndex and str[stop].isBlank:
			stop = stop - 1
		return str.subArray(startIndex, (stop - startIndex) + 1)

	pure array_char_allWhitespace(array<char> str) bool:
		for i from 0 within str.length:
			if str[i].isBlank == False:
				return False
		return True