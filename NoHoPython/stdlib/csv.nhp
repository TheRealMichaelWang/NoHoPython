include "io.nhp"
include "std.nhp"
include "file.nhp"
include "list.nhp"
include "ndarray.nhp"

mod csv:
	def load<T>(array<char> path, fn<T, io::reader> loadElement, T defaultElem) ndarray<T>:
		infile = new io::file(path, "r")
		reader = new io::reader(infile.ptr)
		def matchChar(char expected):
			if reader.readChar() != expected:
				abort "Unexpected character consumed while parsing CSV"
		def consumeNewline() bool:
			if reader.peek() == '\n':
				reader.readChar()
				return True
			elif reader.peek() == '\r': #Windows CRLF compatiility
				reader.readChar()
				matchChar('\n')
				return True
			return False
		
		buffer = new data::list<T>(10, defaultElem)
		columns = -1
		rows = 0
		countedCols = 0
		while True:
			reader.consumeWhitespace()
			matchChar('\"')
			buffer.pushBack(loadElement(reader))
			matchChar('\"')
			countedCols = countedCols + 1
			
			if (foundEof = reader.peek()) == io::EOF or consumeNewline():
				rows = rows + 1
				if columns == -1:
					columns = countedCols
				else:
					assert columns == countedCols
					countedCols = 0
				if foundEof:
					break
			else:
				matchChar(',')
		
		assert buffer.count == rows * columns
		table = new ndarray<T>([rows, columns], defaultElem)
		table.buffer = buffer.toArray()
		return table
	
	def save<T>(array<char> path, ndarray<T> table, fn<None, io::writer, T> saveElement):
		assert table.dims as int == 2
		
		infile = new io::file(path, "w+")
		writer = new io::writer(infile.ptr)
		
		def writeRow(int row):
			def writeElem(int col):
				writer.write('\"')
				saveElement(writer, table.get([row, col]))
				writer.write('\"')
				if col != table.dims[1] - 1:
					writer.write(", ")
			std::repeat(table.dims[1], writeElem)
			if row != table.dims[0] - 1:
				writer.write('\n')
		std::repeat(table.dims[0], writeRow)