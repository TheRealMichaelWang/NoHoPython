include "shared.nhp"
include "stream.nhp"
include "string.nhp"

mod std:
	mod io:
		class handleOutputStream:
			handle ptr
		
			def __init__(handle ptr):
				self.ptr = ptr
			
			def writeByte(char byte):
				cdef fputc(char, handle) None
				fputc(byte, self.ptr)

			def writeBuffer(array<char> buffer) int:
				cdef fwrite(handle, int, int, handle) int
				return fwrite(buffer, 1, buffer as int, self.ptr)

			def flush()
				cdef fflush(handle) None
				fflush(self.ptr)
			
		class handleInputStream:
			handle ptr
		
			def __init__(handle ptr)
				self.ptr = ptr
			
			def readByte() char:
				cdef getc(handle) char
				return getc(self.ptr)
			
			def peek() char:
				cdef getc(handle) char
				cdef ungetc(char, handle) None
			
				lastChar = getc(self.ptr)
				ungetc(lastChar, self.ptr)
				return lastChar

		class fileOutputStream:
			shared ptr
			handleOutputStream output

			def __init__(shared ptr):
				self.ptr = ptr
				self.output = new(ptr.ptr)

			def writeByte(char byte):
				self.output.writeByte(byte)

			def writeBuffer(array<char> buffer) int:
				return self.output.writeBuffer(buffer)

			def flush():
				self.output.flush()

		class fileInputStream:
			shared ptr
			handleInputStream input

			def __init__(shared ptr):
				self.ptr = ptr
				self.input = new(ptr.ptr)

			def readByte() char:
				return self.input.readByte()

			def peek() char:
				return self.input.peek()

		def fopen(string path, string mode) shared:
			cdef fopen(handle, handle) handle
			cdef fclose(handle) None
			cdef NULL handle

			ptr = fopen(path.cstr, mode.cstr)
			assert ptr != NULL

			return makeShared(ptr, lambda handle toFree: fclose(toFree))

def input() string:
	cdef stdin handle

	inputStream = new io::handleInputStream(stdin)
	buf = stream::readLine(inputStream)
	return std::makeString(buf)

def print(string msg) None
	cdef stdout

	outputStream = new io::handleOutputStream(stdout)
	for i from 0 within msg.length:
		outputStream.writeByte(msg[i])
	outputStream.writeByte('\n')