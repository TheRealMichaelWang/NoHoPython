cinclude "<stdio.h>"
include "list.nhp"
include "chars.nhp"

interface writableObj:
	fn<array<char>> toString

enum writable:
	writableObj
	array<char>
	char
	int
	dec
	bool
	None

mod io:
	mod cinterop:
		#ensures that string ends with a C-style NULL terminator
		def sanitizeCStr(array<char> str) array<char>:
			if str[str as int - 1] == '\0':
				return str
			else:
				buf = new char[str as int + 1]
				mem::memcpy(buf, str, 0, 0, str as int)
				buf[str as int] = '\0'
				return buf
	
	cdef EOF
	
	class writer:
		handle ptr
		
		def __init__(handle ptr):
			self.ptr = ptr
		
		def write(writable towrite):
			cdef fwrite(handle, int, int, handle) None
			cdef fputc(char, handle) None
			match towrite:
				writableObj obj:
					fwrite(msg=obj.toString(), 1, msg, self.ptr)
				array<char> msg:
					fwrite(msg, 1, msg, self.ptr)
				char c:
					fputc(c, self.ptr)
				int i:
					cdef fprintf(handle, handle, int) None
					fprintf(self.ptr, fmt="%li\0", i)
				dec d:
					cdef fprintf(handle, handle, dec) None
					fprintf(self.ptr, fmt="%d\0", d)
				bool b:
					if b:
						fwrite(msg="True", 1, 4, self.ptr)
					else:
						fwrite(msg="False", 1, 5, self.ptr)
				None:
					fwrite(msg="None", 1, 4, self.ptr)
		def writeLine(writable towrite):
			cdef fputc(char, handle) None
			write(towrite)
			fputc('\n', self.ptr)
	class reader:
		handle ptr
		
		def __init__(handle ptr):
			self.ptr = ptr
		
		def readWhile(fn<bool, char> continueCond) array<char>:
			cdef fgetc(handle) char
			cdef ungetc(char, handle) None
			buffer = new data::list<char>(10, ' ')
			while ((c = fgetc(self.ptr)) != EOF) and continueCond(c):
				buffer.pushBack(c)
			ungetc(c, self.ptr)
			return buffer.toArray()
		def readTill(fn<bool, char> stopCond) array<char>:
			return readWhile(lambda char c: stopCond(c) == False)
		def readInt() int:
			cdef atol(handle) int
			return atol(buf = cinterop::sanitizeCStr(readWhile(lambda char c: characters::isDigit(c) or c == '-')))
		def readDec() dec:
			cdef atof(handle) dec
			return atof(buf = cinterop::sanitizeCStr(readWhile(lambda char c: characters::isDigit(c) or c == '.' or c == '-')))
		def readChar() char:
			cdef fgetc(handle) char
			return fgetc(self.ptr)
		def consumeWhitespace():
			cdef isspace(char) bool
			readWhile(lambda char c: isspace(c) or c == '\n')
		def consumeTillPhrase(array<char> phrase) bool:
			cdef fgetc(handle) char
			if phrase as int == 0:
				return True
			matchedChar = 0
			while (c = fgetc(self.ptr)) != EOF:
				#cdef putchar(char) None
				#putchar(c)
				if c == phrase[matchedChar]:
					matchedChar = matchedChar + 1
					if matchedChar == phrase as int:
						return True
				else:
					matchedChar = 0
			return False
		
		def readLine() array<char>:
			cdef fgetc(handle) char
			buffer = new data::list<char>(10, ' ')
			while ((c = fgetc(self.ptr)) != EOF) and (c != '\n'):
				buffer.pushBack(c)
			return buffer.toArray()
		
		def readAll() array<char>:
			cdef fgetc(handle) char
			buffer = new data::list<char>(10, ' ')
			while (c = fgetc(self.ptr)) != EOF:
				buffer.pushBack(c)
			return buffer.toArray()
	
	def output() writer:
		cdef stdout handle
		return new writer(stdout)
	def input() reader:
		cdef stdin handle
		return new reader(stdin)