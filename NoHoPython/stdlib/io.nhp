include "shared.nhp"
include "stream.nhp"

mod std:
	cdef ioptr "FILE*"

	mod io:

		class handleOutputStream:
			ioptr ptr
		
			def __init__(ioptr ptr):
				self.ptr = ptr
			
			def writeByte(char byte):
				cdef fputc(char, ioptr) None
				fputc(byte, self.ptr)

			def writeBuffer(array<char> buffer) int:
				cdef fwrite(handle<char>, int, int, ioptr) int
				return fwrite(buffer, 1, buffer as int, self.ptr)

			def flush():
				cdef fflush(ioptr) None
				fflush(self.ptr)
			
		class handleInputStream:
			ioptr ptr
		
			def __init__(ioptr ptr):
				self.ptr = ptr
			
			def readByte() char:
				cdef getc(ioptr) char
				return getc(self.ptr)
			
			def peek() char:
				cdef getc(ioptr) char
				cdef ungetc(char, ioptr) None
			
				lastChar = getc(self.ptr)
				ungetc(lastChar, self.ptr)
				return lastChar

		class fileOutputStream:
			shared<ioptr> ptr
			handleOutputStream output

			def __init__(shared<ioptr> ptr):
				self.ptr = ptr
				self.output = new handleOutputStream(ptr.resource)

			def writeByte(char byte):
				self.output.writeByte(byte)

			def writeBuffer(array<char> buffer) int:
				return self.output.writeBuffer(buffer)

			def flush():
				self.output.flush()

		class fileInputStream:
			shared<ioptr> ptr
			handleInputStream input

			def __init__(shared<ioptr> ptr):
				self.ptr = ptr
				self.input = new handleInputStream(ptr.resource)

			def readByte() char:
				return self.input.readByte()

			def peek() char:
				return self.input.peek()

		def openFile(string path, string mode) shared<ioptr>:
			cdef fopen(handle<char>, handle<char>) ioptr
			cdef fclose(ioptr) None

			ptr = fopen(path.cstr, mode.cstr)
			assert ptr != NULL

			return makeShared(ptr, lambda ioptr toFree: fclose(toFree))

def input() string:
	cdef stdin std::ioptr

	inStream = new std::io::handleInputStream(stdin)
	buf = std::stream::readLine(inStream)
	return std::makeString(buf)

def print(string msg) None:
	cdef stdout std::ioptr

	outStream = new std::io::handleOutputStream(stdout)
	for i from 0 within msg.length:
		outStream.writeByte(msg[i])
	outStream.writeByte('\n')