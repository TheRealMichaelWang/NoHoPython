mod typeExt:
	pure array_T_to_std_list_T<T>(array<T> a) std::list<T>:
		toret = new std::list<T>(a as int)
		toret.addRange(a)
		return toret

	pure std_list_T_forall<T>(std::list<T> l, pure<None, T> todo):
		for i from 0 within l.count:
			todo(l.buffer[i])

	pure std_list_T_map<T, K>(std::list<T> l, pure<K, T> convert) std::list<K>: 
		res = new std::list<K>(l.count)
		for i from 0 within l.count:
			res.pushBack(convert(l.buffer[i]))
		return res

	pure std_list_T_filter<T>(std::list<T> l, pure<bool, T> cond) std::list<T>:
		res = new std::list<T>(l.count)
		for i from 0 within l.count:
			if cond(l.buffer[i]):
				res.pushBack(l.buffer[i])
		return res

	pure std_list_T_add<T>(std::list<T> l, array<T> a) std::list<T>:
		res = new std::list<T>(l.count)
		res.addRange(l)
		res.addRange(a)
		return res

mod std:
	ref class list<T>:
		handle<T> buffer
		int capacity
		int count = 0
		
		pure __init__(int capacity) bool:
			self.capacity = capacity
			self.buffer = malloc(self.capacity * sizeof(T))
			return self.buffer != NULL

		pure __del__():
			for i from 0 within self.count:
				destroy self.buffer + i
			free(self.buffer)
			
		pure clone() option<list<T>>:
			copied = new list<T>(self.count) as list<T>
			copied.count = self.count
			for i from 0 within self.count:
				copied.buffer[i] = self.buffer[i]
			return copied
		
		pure getAtIndex(int i) option<T>:
			if i < 0 or i >= self.count:
				return None
			return self.buffer[i]
			
		def setAtIndex(int i, T elem) option<T>:
			if i < 0 or i >= self.count:
				return None
			destroy self.buffer + i
			return self.buffer[i] = elem
			
		def clear():
			for i from 0 within self.count:
				destroy self.buffer + i
			self.count = 0
			
		def ensureCapacity(int capacity) bool:
			if capacity <= self.capacity:
				return true
				
			self.buffer = std::realloc(self.buffer, capacity)
			if self.buffer == NULL:
				return false
				
			self.capacity = capacity
			return true
			
		def pushBack(T elem) bool:
			if ensureCapacity(self.count + 1) == False:
				return False
			
			self.buffer[self.count] = elem
			self.count = self.count + 1
			
			return true
			
		def pushFront(T elem) bool:
			if ensureCapacity(self.count + 1) == False:
				return false
				
			memmove(self.buffer + 1, self.buffer, self.count * sizeof(T))
			self.buffer[0] = elem
			self.count = self.count + 1
			
			return true
			
		def popFront() option<T>:
			if self.count < 1:
				return None
			
			elem = self.buffer[0]
			destroy self.buffer
			self.count = self.count - 1
			memmove(self.buffer, self.buffer + 1, self.count * sizeof(T))
			return elem
			
		def popBack() option<T>:
			if self.count < 1:
				return None
				
			self.count = self.count - 1
			elem = self.buffer[self.count]
			destroy self.buffer + self.count
			
			return elem
			
		def insert(int index, T elem) bool:
			if index < 0 or index > self.count:
				return false
			if ensureCapacity(self.count + 1) == False:
				return false
			
			memmove(self.buffer + index + 1, self.buffer + index, (self.count - index) * sizeof(T))
			self.buffer[index] = elem
			self.count = self.count + 1
			
			return true
			
		def remove(int index) bool:
			if index < 0 or index >= self.count:
				return false
			
			destroy self.buffer + index
			memmove(self.buffer + index, self.buffer + index + 1, self.count - (index + 1))
			self.count = self.count - 1
			return true
			
		def addRange(readonly array<T> buf) bool:
			if ensureCapacity(self.count + buf as int) == False:
				return false
			for i from 0 within buf:
				self.buffer[self.count + i] = buf[i]
			self.count = self.count + buf as int
			return true
			
		pure to_array_T() array<T>:
			return marshal T[self.count](self.buffer)

		pure reverse() option<list<T>>:
			reversed = new list<T>(self.count) as list<T>
			reversed.count = self.count
			for i from 0 within self.count:
				reversed.buffer[i] = self.buffer[self.count - (i + 1)]
			return reversed