cinclude "<stdlib.h>"
cinclude "<string.h>"

mod data:
	def convertList<T, X>(list<T> input, fn<X, T> convert) list<X>:
		converted = new list<X>(input.count)
		for i from 0 within input.count:
			converted.pushBack(convert(input[i]))
		return converted
	
	class list<T>:
		handle buffer
		int count = 0
		int capacity
		
		def __init__(int capacity):
			cdef malloc(int) handle
			cdef NULL
			self.capacity = capacity
			self.buffer = malloc(capacity * sizeof(T))
			assert self.buffer != NULL
		
		def __del__():
			cdef free(handle) None
			for i from 0 within self.count:
				destroy T[i]self.buffer
			free(self.buffer)
		
		def __copy__() list<T>:
			copied = new list<T>(self.count)
			copied.count = self.count
			for i from 0 within self.count:
				copied.buffer{copied}[i] = self.buffer[i] as T
			return copied
		
		def getAtIndex(int i) T:
			if i < 0 or i >= self.count:
				abort "Index out of range."
			return self.buffer[i]
		def setAtIndex(int i, T elem) T:
			if i < 0 or i >= self.count:
				abort "Index out of range."
			destroy T[i]self.buffer
			return self.buffer{self}[i] = elem
		
		def ensureCapacity(int capacity):
			if self.capacity < capacity:
				cdef realloc(handle, int) handle
				cdef NULL
				self.capacity = capacity + 10
				self.buffer = realloc(self.buffer, self.capacity * sizeof(T))
				assert self.buffer != NULL
		
		def pushFront(T elem):
			ensureCapacity(self.count + 1)
			cdef memcpy(handle, handle, int) handle
			memcpy(self.buffer + sizeof(T), self.buffer, self.count * sizeof(T))
			self.buffer{self}[0] = elem
			self.count = self.count + 1
		def pushBack(T elem):
			ensureCapacity(self.count + 1)
			self.buffer{self}[self.count] = elem
			self.count = self.count + 1
		def insert(int index, T elem):
			ensureCapacity(self.count + 1)
			cdef memcpy(handle, handle, int) handle
			memcpy(self.buffer + ((index + 1) * sizeof(T)), self.buffer + (index * sizeof(T)), (self.count - index) * sizeof(T))
			self.buffer{self}[index] = elem
			self.count = self.count + 1
		def addBuffer(array<T> buf):
			ensureCapacity(self.count + buf as int)
			for i from 0 within buf:
				self.buffer{self}[self.count + i] = buf[i]
			self.count = self.count + buf as int
		def addRange(list<T> range):
			ensureCapacity(self.count + range.count)
			for i from 0 within range.count:
				self.buffer{self}[self.count + i] = range.buffer[i] as T
			self.count = self.count + range.count
		
		def remove(fn<bool, T> compare) bool:
			for i from 0 within self.count:
				if compare(self.buffer[i] as T):
					cdef memcpy(handle, handle, int) handle
					destroy T[i]self.buffer
					memcpy(self.buffer + (i * sizeof(T)), self.buffer + ((i + 1) * sizeof(T)), (self.count - (i + 1)) * sizeof(T))
					self.count = self.count - 1
					return True
			return False
		def popFront() T:
			cdef memcpy(handle, handle, int) handle
			popped = getAtIndex(0)
			destroy T self.buffer
			memcpy(self.buffer, self.buffer + sizeof(T), self.count = self.count - 1)
			return popped
		def popBack() T:
			popped = getAtIndex(self.count - 1)
			self.count = self.count - 1
			destroy T[self.count]self.buffer
			return popped
		
		def toArray(T defaultValue) array<T>:
			buffer = new T[self.count](defaultValue)
			for i from 0 within self.count:
				buffer[i] = self.buffer[i] as T
			return buffer
		
		def forall(fn<None, T> todo):
			for i from 0 within self.count:
				todo(self.buffer[i] as T)
		def sort(fn<int, T, T> compare):
			cdef malloc(int) handle
			cdef free(handle) None
			cdef memcpy(handle, handle, int) handle
			sorted = False
			tempBuf = malloc(sizeof(T))
			while sorted == False:
				sorted = True
				for i from 1 within self.count:
					if compare(self.buffer[i] as T, self.buffer[i - 1] as T) < 0:
						larger = self.buffer + ((i - 1) * sizeof(T))
						smaller = self.buffer + (i * sizeof(T))
						memcpy(tempBuf, larger, sizeof(T))
						memcpy(larger, smaller, sizeof(T))
						memcpy(smaller, tempBuf, sizeof(T))
						sorted = False
			free(tempBuf)
		
		def map(fn<T, T> transform) list<T>:
			mapped = new list<T>(self.count)
			mapped.count = self.count
			for i from 0 within self.count:
				mapped.buffer{mapped}[i] = transform(self.buffer[i] as T)
			return mapped
		def filter(fn<bool, T> keep) list<T>:
			kept = new list<T>(self.count)
			for i from 0 within self.count:
				if keep(self.buffer[i] as T):
					kept.pushBack(self.buffer[i] as T)
			return kept
		def reduce(fn<T, T, T> add) T:
			accum = getAtIndex(0)
			for i from 1 within self.count:
				accum = add(accum, self.buffer[i] as T)
			return accum