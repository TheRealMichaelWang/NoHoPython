include "mem.nhp"

mod data:
	class list<T>:
		readonly T defaultValue
		array<T> buffer
		int count
		
		def __init__(int capacity, T defaultValue):
			self.buffer = new T[capacity](self.defaultValue = defaultValue)
			self.count = 0
		
		def pushBack(T elem):
			if self.count == (self.buffer as int):
				newBuffer = new T[self.count + 10](self.defaultValue)
				mem::memcpy(newBuffer, self.buffer, 0, 0, self.count)
				self.buffer = newBuffer
			self.buffer[self.count] = elem
			self.count = self.count + 1
		def addRange(list<T> range):
			if self.count + range.count >= self.buffer as int:
				newBuffer = new T[self.count + range.count](self.defaultValue)
				mem::memcpy(newBuffer, self.buffer, 0, 0, self.count)
				self.buffer = newBuffer
			mem::memcpy(self.buffer, range.buffer, self.count, 0, range.count)
			self.count = self.count + range.count
		
		def toArray() array<T>:
			buffer = new T[self.count](self.defaultValue)
			i = 0
			while i < self.count:
				buffer[i] = self.buffer[i]
				i = i + 1
			return buffer
		
		def getAtIndex(int index) T:
			return self.buffer[index]
		
		def setAtIndex(int index, T elem) T:
			return self.buffer[index] = elem
		
		def forall(fn<nothing, T> todo):
			i = 0
			while i < self.count:
				todo(self.buffer[i])
				i = i + 1