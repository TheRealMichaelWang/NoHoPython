cinclude "<string.h>"
cinclude "<stdlib.h>"
include "list.nhp"

mod data:
	interface map<K, V>:
		fn<V, K> get
		fn<bool, K, V> emplace
		fn<bool, K> has
	
	class keyValuePair<K, V>:
		K key
		V value
		
		def __init__(K key, V value):
			self.key = key
			self.value = value
	
	class hashmap<K, V>:
		handle keyBuckets
		handle valueBuckets
		handle bucketStates
		int bucketCount
		
		fn<int, K> hasher
		
		def __init__(fn<int, K> hasher, int bucketCount):
			self.bucketCount = bucketCount
			self.hasher = hasher
			
			cdef NULL
			cdef malloc(int) handle
			cdef calloc(int, int) handle
			self.keyBuckets = malloc(bucketCount * sizeof(int))
			self.valueBuckets = malloc(bucketCount * sizeof(V))
			self.bucketStates = calloc(bucketCount, sizeof(bool))
			assert self.keyBuckets != NULL
			assert self.valueBuckets != NULL
			assert self.bucketStates != NULL
		def __copy__() hashmap<K, V>:
			copied = new hashmap<K, V>(self.hasher, self.bucketCount)
			for i from 0 within self.bucketCount:
				if self.bucketStates[i] as bool:
					copied.keyBuckets[i] = self.keyBuckets[i] as int
					copied.valueBuckets[i] = self.valueBuckets[i] as V
					copied.bucketStates[i] = True
			return copied
		def __del__():
			for i from 0 within self.bucketCount:
				if self.bucketStates[i] as bool:
					destroy V[i]self.valueBuckets
			cdef free(handle) None
			free(self.keyBuckets)
			free(self.valueBuckets)
			free(self.bucketStates)
		
		def has(K key) bool:
			hash = self.hasher(key)
			for i from hash % self.bucketCount within self.bucketCount:
				if self.bucketStates[i] as bool and self.keyBuckets[i] as int == hash:
					return True
			return False
		
		def get(K key) V:
			hash = self.hasher(key)
			for i from hash % self.bucketCount within self.bucketCount:
				if self.bucketStates[i] as bool and self.keyBuckets[i] as int == hash:
					return self.valueBuckets[i] as V
			abort "Key not found"
		
		def emplace(K key, V toadd) bool:
			def internalEmplace(int hash, V value) bool:
				for i from hash % self.bucketCount within self.bucketCount:
					if self.bucketStates[i] as bool == False: #empty bucket, claim it
						self.keyBuckets[i] = hash
						self.valueBuckets{self}[i] = value
						self.bucketStates[i] = True
						return True
					elif self.keyBuckets[i] as int == hash:
						destroy V[i]self.valueBuckets
						self.valueBuckets{self}[i] = value
						return False
				
				oldKeys = self.keyBuckets
				oldValues = self.valueBuckets
				oldBucketStates = self.bucketStates
				oldBucketCount = self.bucketCount
				
				cdef NULL
				cdef malloc(int) handle
				cdef calloc(int, int) handle
				cdef free(handle) None
				self.bucketCount = self.bucketCount + 64
				self.keyBuckets = malloc(self.bucketCount * sizeof(int))
				self.valueBuckets = malloc(self.bucketCount * sizeof(V))
				self.bucketStates = calloc(self.bucketCount, sizeof(bool))
				assert self.keyBuckets != NULL
				assert self.valueBuckets != NULL
				assert self.bucketStates != NULL
				for i from 0 within oldBucketCount:
					if oldBucketStates[i] as bool:
						internalEmplace(oldKeys[i] as int, oldValues[i] as V)
						destroy V[i]oldValues
				free(oldKeys)
				free(oldValues)
				free(oldBucketStates)
				return internalEmplace(hash, value)
			return internalEmplace(self.hasher(key), toadd)
	
	class treemap<K, V>:
		fn<int, K, K> compare
		list<keyValuePair<K, V>> buckets
		
		def __init__(fn<int, K, K> compare):
			self.compare = compare
			self.buckets = new list<keyValuePair<K, V>>(10)
		
		def has(K key) bool:
			low = 0
			high = self.buckets.count
			while low < high:
				mid = (high + low) / 2
				
				res = self.compare(key, self.buckets[mid].key)
				if res == 0: #exact match
					return True
				elif res > 0: #key is greater than pivot
					low = mid
				else: #key is smaller than pivot
					high = mid
			
			#key was never found
			return False
		
		def get(K key) V:
			low = 0
			high = self.buckets.count
			while low < high:
				mid = (high + low) / 2
				
				res = self.compare(key, self.buckets[mid].key)
				if res == 0: #exact match
					return self.buckets[res].value
				elif res > 0: #key is greater than pivot
					low = mid
				else: #key is smaller than pivot
					high = mid
			
			abort "Key not found"
		
		def emplace(K key, V value) bool:
			low = 0
			high = self.buckets.count
			while low < high:
				mid = (high + low) / 2
				
				res = self.compare(key, self.buckets[mid].key)
				if res == 0: #exact match, overwrite bucket value
					self.buckets[mid].value = value
					return False
				elif res > 0: #key is greater than pivot
					low = mid
				else: #key is smaller than pivot
					high = mid
			
			#key was never found, actually insert
			self.buckets.insert(low, new keyValuePair<K, V>(key, value))
			return True