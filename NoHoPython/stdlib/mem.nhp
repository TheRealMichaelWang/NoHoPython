mod mem:
	def memcpy<T>(array<T> dest, array<T> src, int destOffset, int srcOffset, int length):
		i = 0
		while i < length:
			dest[i + destOffset] = src[i + srcOffset]
			i = i + 1
	
	#analysis mode must not be none
	def report():
		cdef memoryReport() None
		memoryReport()
	def leaksan(fn<None> todo):
		cdef printf(handle, int, int) None
		cdef active_allocs int
		cdef active_memory_usage int
		preMem = active_memory_usage
		preAllocs = active_allocs
		todo()
		if (currentAllocs = active_allocs) > preAllocs:
			currentMem = active_memory_usage
			printf(fmt="%i bytes leaked, %i allocations leaked.\n\0", currentMem - preMem, currentAllocs - preAllocs)
			abort "Memory leak detected!"