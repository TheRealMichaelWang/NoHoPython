mod std:
	class shared<T>:
		T resource

		handle<int> counterPtr
		fn<None, T> destructor

		def __init__(T resource, handle<int> counterPtr, fn<None, T> destructor):
			self.resource = resource
			self.counterPtr = counterPtr
			self.destructor = destructor

		def __copy__() shared<T>:
			self.counterPtr[0] = self.counterPtr[0] + 1
			return new shared<T>(self.resource, self.counterPtr, self.destructor)
			
		def __del__():
			cdef free(handle<int>) None
			if self.counterPtr[0] == 0:
				self.destructor(self.resource)
				free(self.counterPtr)
			else:
				self.counterPtr[0] = self.counterPtr[0] - 1
				
	def makeShared<T>(T resource, fn<None, T> destructor) shared<T>:
		cdef malloc(int) handle<int>
		
		counterPtr = malloc(sizeof(int))
		assert counterPtr != None
		counterPtr[0] = 0
		
		return new shared<T>(resource, counterPtr, destructor)