include "shared.nhp"

mod std:
	cdef EOF char
	cdef NULL handle

	interface outputStream:
		fn<None, char> writeByte
		fn<None> flush
		
	interface inputStream:
		fn<char> readByte

	interface peekableStream:
		fn<char> readByte
		fn<char> peek
	
	class bufferWriter:
		handle buffer
		
		int capacity
		int length
		
		def __init__(int capacity):
			self.capacity = capacity
			self.length = 0
			
			cdef malloc(int) handle
			self.buffer = malloc(capacity)
			assert self.buffer != NULL
			
		def __del__():
			cdef free(handle) None
			free(self.buffer)
			
		def __copy__() bufferWriter:
			cdef memcpy(handle, handle, int) handle
			
			copied = new bufferWriter(self.length)
			memcpy(copied.buffer, self.buffer, self.length)
			copied.length = self.length
			
			return copied
			
		def to_array_char() array<char>:
			return marshal char[self.length](self.buffer)
			
		def writeByte(char byte):
			cdef realloc(handle, int) handle
		
			if self.length == self.capacity:
				self.capacity = self.capacity + 32
				self.buffer = realloc(self.buffer, self.capacity)
				assert self.buffer = NULL
				
			self.buffer[self.length] = byte
			self.length = self.length + 1
	
	class bufferReader:
		handle buffer
		int position = 0
		int length
		
		def __init__(handle buffer, int length):
			self.buffer = buffer
			self.length = length
			
		def readByte() char:
			if self.position == self.length:
				return EOF
			toret = self.buffer[self.position] as char
			self.position = self.position
			return toret

		def peek() char:
			if self.position == self.length:
				return EOF
			return self.buffer[self.position]
			
	class ioOutputStream:
		shared filePtr
		
		def __init__(shared filePtr):
			self.filePtr = filePtr
			
		def writeByte(char byte):
			cdef fputc(char, handle) None
			fputc(byte, self.filePtr.ptr)
			
	class ioInputStream:
		shared filePtr
		
		def __init__(shared filePtr)
			self.filePtr = filePtr
			
		def readByte() char:
			cdef getc(handle) char
			return getc(self.filePtr.ptr)
			
		def peek() char:
			cdef getc(handle) char
			cdef ungetc(char, handle) None
			
			lastChar = getc(self.filePtr.ptr)
			ungetc(lastChar, self.filePtr.ptr)
			return lastChar

	mod stream:
		def read(inputStream input, array<char> dest, int offset, int length) int:
			read = 0
			
			for i from 0 within length:
				byte = input.readByte()
				
				if byte == EOF:
					break

				dest[offset + i] = byte
				read = read + 1
			
			return read

		def readLine(inputStream input) array<char>:
			bufferWriter = new bufferWriter(64)

			while True:
				c = input.readByte()

				if c == '\n' or c == EOF:
					return bufferWriter
				else:
					bufferWriter.writeByte(c)

		def readToEnd(inputStream input) array<char>:
			bufferedWriter = new bufferedWriter(64)

			while True:
				c = input.readByte()

				if c == EOF:
					return bufferWriter
				else:
					bufferWriter.writeByte(c)

		def write(outputStream output, array<char> src, int offset, int length):
			for i from 0 within length:
				output.writeByte(src[offset + i])