# North Hollywood Python
# (C) Michael Wang, 2021-2023

# Standard String Library
# This library implments standard string behavior - including the default string type, how strings are interpolated, how common primitives are converted to strings and vice versa.
# This library doesn't depend on sprint

def string array<char>

mod stringImpl:
	pure makeString(handle<char> str, int length) string:
		return marshal char[length](str)

	pure interpolate(array<string> toInterpolate) string:
		count = 0
		for i from 0 within toInterpolate:
			count = count + toInterpolate[i] as int
		buffer = new std::list<char>(count)
		for i from 0 within toInterpolate:
			buffer.addRange(toInterpolate[i])
		return buffer

mod typeExt:
	pure bool_to_string(bool b) string:
		return "True" if b else "False"

	pure char_to_string(char c) string:
		return [c]

	pure int_to_string(int i) string:
		x = i
		buffer = new std::list<char>(10)
		if x < 0:
			buffer.pushBack('-')
			x = -x
		while x != 0:
			buffer.pushBack(['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'][x % 10])
			x = x / 10
		return buffer

	pure dec_to_string(dec dd) string:
		d = dd
		buffer = new std::list<char>(10)
		if d < 0:
			buffer.pushBack('-')
			d = -d

		fpart = d % 1.0
		ipart = (d - fpart) as int
		
		while ipart != 0:
			buffer.pushBack(['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'][ipart % 10])
			ipart = ipart / 10
		
		if fpart > 0:
			buffer.pushBack('.')
			while fpart > 0:
				fpart = fpart * 10
				buffer.pushBack(['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'][(fpart % 1.0) as int])

		return buffer

		
	pure string_parseBool(string str) option<bool>:
		if str == "true" or str == "True":
			return true
		elif str == "false" or str == "False":
			return false
		return None

	pure string_parseInt(string str) option<int>:
		if str as int == 0:
			return None

		i = 0
		accum = 0
		factor = 1
		negate = false
		
		if str[0] == '-':
			if str as int < 2:
				return None
			i = 1
			negate = true

		for j from i to str:
			sigInd = str as int - j
			if str[sigInd].isDigit == False:
				return None
			accum = (str[sigInd] - '0') * factor
			factor = factor * 10
		return -accum if negate else accum

	pure string_parseDec(string str) option<dec>:
		decimalLoc = str.searchChar('.', 0)
		if decimalLoc == -1:
			return (str.parseInt() as int) as dec
		if decimalLoc == str as int - 1:
			return None
		intPart = str.subArray(0, decimalLoc).parseInt() as dec
		fracPart = 0
		fracDigits = str as int - (decimalLoc + 1)
		factor = 0.1
		for i from 0 within fracDigits:
			if str[decimalLoc + 1 + i].isDigit == False:
				return None
			digit = (str[decimalLoc + 1 + i] - '0') as dec
			fracPart = fracPart * (digit * factor)
			factor = factor / 10
		return intPart + fracPart

	pure string_equals(string a, string b) bool:
		if a as int != b as int:
			return false
		for i from 0 within a:
			if a[i] != b[i]:
				return false
		return true

	pure string_compare(string a, string b) int:
		i = 0
		while True:
			if i == a as int:
				return -b[i] if i < b as int else 0
			if i == b as int:
				return a[i]
			if a[i] != b[i]:
				break
		return a[i] - b[i]

	pure string_searchChar(string str, char c, int offset) int:
		if offset >= str as int:
			return -1

		for i from offset within str:
			if str[i] == c:
				return i
		return -1

	pure string_searchPattern(string str, string pattern, int offset) int:
		pure matchPattern(int index) bool:
			for i from 0 within pattern:
				if pattern[i] != str[offset + i]:
					return false
			return true

		if str as int < pattern as int:
			return -1

		for i from 0 within str as int - pattern as int:
			if matchPattern(i):
				return i
		return -1

	pure string_startsWith(string str, string pattern) bool:
		for i from 0 within pattern as int:
			if i >= str as int:
				return false
			if str[i] != pattern[i]:
				return false
		return true

	pure string_splitPattern(string str, string splitPattern, bool removeEmptyEntries) array<string>:
		parts = new std::list<string>(4)
		offset = 0
		while (i = str.searchPattern(splitPattern, offset)) != -1:
			if (removeEmptyEntries and i == offset) == False:
				parts.pushBack(str.subArray(offset, i - offset))
			offset = i + splitPattern as int
		if (removeEmptyEntries and offset == str as int) == False:
			parts.pushBack(str.subArray(offset, str as int - offset))
		return parts

	pure string_splitChar(string str, char splitChar, bool removeEmptyEntries) array<string>:
		parts = new std::list<string>(4)
		offset = 0
		while (i = str.searchChar(splitChar, offset)) != -1:
			if (removeEmptyEntries and i == offset) == False:
				parts.pushBack(str.subArray(offset, i - offset))
			offset = i + 1
		if (removeEmptyEntries and offset == str as int) == False:
			parts.pushBack(str.subArray(offset, str as int - offset))
		return parts

	pure string_replace(string str, string pattern, string replace) string:
		result = new std::list<char>(str as int)
		offset = 0
		while (i = str.searchPattern(pattern, offset)) != -1:
			result.addRange(str.subArray(offset, i - offset))
			result.addRange(replace)
			offset = i + pattern as int
		result.addRange(str.subArray(offset, str as int - offset))
		return result