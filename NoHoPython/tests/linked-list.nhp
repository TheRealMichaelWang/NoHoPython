include "mem.nhp"

#linked lists no longer work because of restrictions on match statements; matched variables are copies of the original enum values. See issue #18 for more details

enum nullable<T>:
	T
	None

class node<T>:
	T elem
	nullable<node<T>> next
	
	def __init__(T elem, nullable<node<T>> next):
		self.elem = elem
		self.next = next

class list<T>:
	nullable<node<T>> head
	
	def __init__():
		self.head = None
	
	def isEmpty() bool:
		match self.head:
			node<T>:
				return False
			None:
				return True
	
	def pushFront(T elem):
		self.head = new node<T>(elem, self.head)
	
	def pushBack(T elem):
		def internalPushBack(node<T> parent):
			match parent.next:
				node<T>:
					internalPushBack(parent.next)
				None:
					parent.next = new node<T>(elem, None)
		match self.head:
			node<T>:
				internalPushBack(self.head)
			None:
				self.head = new node<T>(elem, None)
	
	def popFront() nullable<T>:
		match self.head:
			node<T>:
				toret = self.head.elem
				self.head = self.head.next
				return toret
			None:
				return None

def main():
	def test():
		cdef printf(handle<char>, int) None
		mem::report()
		myList = new list<int>()
		
		for i from 1 to 20:
			myList.pushBack(i)
		mem::report()
		
		stop = myList.isEmpty
		while stop() == False:
			match res=myList.popFront():
				int j:
					printf("%i\n\0", j)
				None:
					break
		mem::report()
	
	mem::leaksan(test)