include "leaksan.nhp"

class node<T>:
	T elem
	option<node<T>> next
	
	pure __init__(T elem, option<node<T>> next):
		self.elem = elem
		self.next = next

class list<T>:
	option<node<T>> head
	
	pure __init__():
		self.head = None
	
	pure get_isEmpty() bool:
		return self.head is node<T>
	
	def pushFront(T elem):
		self.head = new node<T>(elem, self.head)
	
	def pushBack(T elem):
		def internalPushBack(node<T> parent):
			match parent.next:
				node<T>:
					internalPushBack(parent.next)
				None:
					parent.next = new node<T>(elem, None)
		match self.head:
			node<T>:
				internalPushBack(self.head)
			None:
				self.head = new node<T>(elem, None)
	
	def popFront() option<T>:
		match self.head:
			node<T>:
				toret = self.head.elem
				self.head = self.head.next
				return toret
			None:
				return None

pure main():
	pure test():
		std::leaksan::report()
		myList = new list<int>()
		
		for i from 1 to 20:
			myList.pushBack(i)
		mem::report()
		
		while True:
			match myList.popFront():
				int j:
					print(j)
				None:
					break
		mem::report()
	
	std::leaksan::run(test)